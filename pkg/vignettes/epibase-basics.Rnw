\documentclass{article}
% \VignettePackage{epibase}
% \VignetteIndexEntry{Analysis of disease outbreak data}

\usepackage{graphicx}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}
\usepackage{array}
\usepackage{color}

\usepackage[utf8]{inputenc} % for UTF-8/single quotes from sQuote()
\newcommand{\code}[1]{{{\tt #1}}}
\title{An introduction to analysing disease outbreak data using \textit{epibase} \Sexpr{packageDescription("epibase", fields = "Version")}}
\author{Thibaut Jombart, Addyour Namehere}
\date{\today}




\sloppy
\hyphenpenalty 10000


\begin{document}

\SweaveOpts{prefix.string = genomics, echo=TRUE, eval=TRUE, fig = FALSE, eps = FALSE, pdf = TRUE}



\definecolor{Soutput}{rgb}{0,0,0.56}
\definecolor{Sinput}{rgb}{0.56,0,0}
\DefineVerbatimEnvironment{Sinput}{Verbatim}
{formatcom={\color{Sinput}},fontsize=\footnotesize, baselinestretch=0.75}
\DefineVerbatimEnvironment{Soutput}{Verbatim}
{formatcom={\color{Soutput}},fontsize=\footnotesize, baselinestretch=0.75}

\color{black}

\maketitle

\begin{abstract}
  This vignette introduces the main functionalities of \textit{epibase}, a package implementing
  basic tools for the analysis of outbreak data.
  Disease outbreak data can be varied and complex, and one of the core features of \textit{epibase} lies in the formal (S4) class \texttt{obkData}, which allows for storing and handling a variety of data about individuals, samples, contact structures, or even clinical events.
  Beyond introducing this data structure, this tutorial illustrates how these objects can be handled and analyzed in R.
\end{abstract}

\newpage

\tableofcontents


\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Storing outbreak data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In this section, we first detail the structure of the core classes used for storing information in
\textit{epibase}, and then explain how to import data into the package, and how to handle data once imported.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Class definitions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Data collected during outbreaks can be hugely diverse and complex.
In \textit{epibase}, our purpose is to have a general class of objects which can store virtually any
information sampled during outbreak, without the user worrying about storage issues.
For most purposes, the core class \texttt{obkData} will be treated as a black box, with which the
user can interact using specific functions called \textit{accessors}, without having to worry about
the internal structure of the object.


% % % % % % % % % % % % % % % % %
\subsubsection{\code{obkData}: storage of outbreak data}
% % % % % % % % % % % % % % % % %
The class \texttt{ObkData} is used to store various types of information.
The definition of the class in terms of R objects can be obtained by:
<<>>=
library(epibase)
getClassDef("obkData")
@

Each slot of an \texttt{ObkData} object is optional. By convention, empty slots are always \texttt{NULL}.
The slots respectively contain:
\begin{itemize}
\item \texttt{individuals}: a \texttt{data.frame} storing individual data, such as age, sex,
  or onset of symptoms. If not \texttt{NULL}, this \texttt{data.frame} must contain a column named
  \texttt{individualID} which contains unique identifiers for individuals. Data for a given
  individual must be stored on exactly one row.
\item \texttt{samples}: a \texttt{data.frame} storing sample data, typically swab results or
  accession numbers of DNA sequences. If not \texttt{NULL}, this \texttt{data.frame} must contain
  the three following columns: \texttt{individualID} (unique identifiers for individuals),
  \texttt{sampleID} (unique identifiers for samples), and \texttt{date} (collection dates for the samples).
\item \texttt{clinical}: a list of \texttt{data.frame}s storing any additional clinical information;
  there is no constraint on the number of \texttt{data.frame}s stored, but each one must contain
  columns named \texttt{individualID} (unique identifiers for individuals) and \texttt{date} (date
  of observations/interventions).
  \item \texttt{dna}: DNA sequences of one or more genes, stored as an \texttt{obkSequences}
    object. See section below for details on \texttt{obkSequences} objects.
  \item \texttt{contacts}: dynamic contact network between the individuals, stored as an
    \texttt{obkContacts} object. See section below for details on \texttt{obkContacts} objects.
  \item \texttt{trees}: a list of phylogenetic trees with the class \texttt{multiPhylo} (from the
    \textit{ape} package); can be used to store posterior distribution of trees from Bayesian
    software such as BEAST.
\end{itemize}



% % % % % % % % % % % % % % % % %
\subsubsection{\texttt{obkSequences}: storage of DNA sequences for different genes}
% % % % % % % % % % % % % % % % %

Pathogen sequence data can typically be obtained for a range of different genes, making the handling of such information not entirely trivial.
The class \texttt{obkSequences} stores such information.
It consists in a list of matrices of aligned DNA sequences (in rows), stored using \textit{ape}'s class
\texttt{DNAbin} for efficiency, with each item of the list corresponding to a gene.
If provided, gene names are the names of the list.
The row names for each matrix contain unique identifiers for the sequences, typically accession numbers.
Matching of samples and sequences in made in the \texttt{obkData} objects through the field
\texttt{sequenceID} in the \texttt{@sample} slot.
When several loci have been sequenced, the locus information must also be provided for each
accession number using a column \texttt{locus} in the \texttt{@sample} slot.



% % % % % % % % % % % % % % % % %
\subsubsection{\code{obkContacts}: storage of dynamics contact networks}
% % % % % % % % % % % % % % % % %



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Getting data into \textit{epibase}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Storing data in \textit{epibase} requires the following, fairly simple steps:
\begin{enumerate}
\item read data into R
  \begin{enumerate}
  \item read \texttt{data.frame}s storing individuals, samples, and clinical information in R from a
    text file, typically using \texttt{read.table} or \texttt{read.csv} for comma-separated
    files. Every standard spreadsheet software can export data to these formats.
  \item read DNA sequences from a single file, typically using \texttt{read.dna} from the ape
    package; this ``master'' file must contain all DNA sequences of all genes, with unique
    identifiers for the sequences as labels
  \end{enumerate}
\item use this information as input to the \texttt{obkData} constructor (\texttt{new("obkData",\ldots)}) to create an
  \texttt{obkData} object.
\end{enumerate}

New objects are created using \texttt{new}, with these slots as arguments.
If no argument is provided, an empty object is created:



% % % % % % % % % % % % % % % % %
\subsubsection{The \code{obkData} constructor}
% % % % % % % % % % % % % % % % %


% % % % % % % % % % % % % % % % %
\subsubsection{The \code{obkSequences} constructor}
% % % % % % % % % % % % % % % % %


% % % % % % % % % % % % % % % % %
\subsubsection{The \code{obkContacts} constructor}
% % % % % % % % % % % % % % % % %








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data handling using \texttt{obkData} objects}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Accessors}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



The phylosophy underlying formal (S4) classes is that the internal representation of the data can be
complex as long as accessing this information is simple.
This is made possible by decoupling storage and accession: the user is not meant to access the
content of the object directly, but has to use \texttt{accessors} to retrieve or modify the information.
\\


% % % % % % % % % % % % % % % % %
\subsubsection{Accessors for \code{obkData} objects}
% % % % % % % % % % % % % % % % %

Available accessors are documented in \code{?obkData}.
\begin{itemize}
  \item \texttt{}: returns ...
  \item \texttt{}: returns ...
\end{itemize}




% % % % % % % % % % % % % % % % %
\subsubsection{Accessors for \code{obkSequences} objects}
% % % % % % % % % % % % % % % % %



% % % % % % % % % % % % % % % % %
\subsubsection{Accessors for \code{obkContacts} objects}
% % % % % % % % % % % % % % % % %






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Subsetting the data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%







\end{document}
